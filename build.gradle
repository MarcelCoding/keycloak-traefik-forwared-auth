buildscript {
    ext {
        freefairVersion = '5.3.3.3'
        keycloakVersion = '14.0.0'
        junitVersion = '5.7.1'
        autoServiceVersion = '1.0'
    }
}

plugins {
    id 'base'
    id 'nebula.project' version '8.1.0' apply false
    id 'com.github.spotbugs' version '4.7.1' apply false
    id 'io.freefair.git-version' version "${freefairVersion}"
    id 'io.freefair.lombok' version "${freefairVersion}" apply false
}

if (version.toString().endsWith('SNAPSHOT')) {
    version = 'edge'
} else if (version.toString().startsWith("v")) {
    version = version.toString().substring(1)
}

allprojects {
    group 'de.an2ic3.keycloak'
}

subprojects {
    apply plugin: 'pmd'
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'nebula.project'
    apply plugin: 'io.freefair.lombok'
    apply plugin: 'com.github.spotbugs'

    version rootProject.version

    repositories {
        mavenCentral()
    }

    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_11

    dependencies {
//        testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
//        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    }

    test {
        useJUnitPlatform()
    }

    jar {
        from "${rootDir}/LICENSE"
        manifest.attributes([
                'Specification-Title'     : project.name,
                'Specification-Vendor'    : 'an2ic3 (https://github.com/an2ic3)',
                'Specification-Version'   : project.version,
                'Implementation-Vendor'   : 'an2ic3 (https://github.com/an2ic3)',
                'Implementation-Timestamp': new Date().format('yyyy-MM-dd\'T\'HH:mm:ssZ')
        ])

        excludes += '.gitkeep'
    }

    lombok {
        config.put('lombok.equalsandhashcode.callsuper', 'CALL')
        config.put('lombok.tostring.callsuper', 'CALL')
    }

    tasks.withType(JavaCompile) {
        doFirst {
            options.encoding = 'UTF-8'
        }
    }

    tasks.withType(Javadoc).all { enabled = false }

    tasks.withType(Checkstyle) {
        exclude('**/module-info.java')
        ignoreFailures = true
        reports {
            xml.enabled(true)
            html.enabled(false)
        }
    }

    checkstyleMain {
        configFile = file("${rootDir}/config/checkstyle/main.xml")
    }

    checkstyleTest {
        configFile = file("${rootDir}/config/checkstyle/test.xml")
    }

    tasks.withType(Pmd) {
        ignoreFailures = true
        reports {
            xml.enabled(true)
            html.enabled(false)
        }
    }

    spotbugs {
        ignoreFailures = true
    }
}
